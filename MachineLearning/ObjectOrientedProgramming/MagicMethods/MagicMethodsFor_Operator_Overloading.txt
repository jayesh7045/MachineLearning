
Operator overloading in Python allows you to define how operators behave when applied to objects 
of your custom classes. This is done by defining special methods, often referred to as "magic methods" 
or "dunder methods" (short for "double underscore"), in your class. These methods are automatically 
invoked when you use operators with instances of your class.
Here are the most relevant and commonly used magic methods for operator overloading in Python:

### 1. **Comparison Operators**
   - **`__eq__(self, other)`**: For `==` (equality).
   - **`__ne__(self, other)`**: For `!=` (inequality).
   - **`__lt__(self, other)`**: For `<` (less than).
   - **`__gt__(self, other)`**: For `>` (greater than).

### 2. **Arithmetic Operators**
   - **`__add__(self, other)`**: For `+` (addition).
   - **`__sub__(self, other)`**: For `-` (subtraction).
   - **`__mul__(self, other)`**: For `*` (multiplication).
   - **`__truediv__(self, other)`**: For `/` (division).

### 3. **In-Place Arithmetic Operators**
   - **`__iadd__(self, other)`**: For `+=` (in-place addition).
   - **`__isub__(self, other)`**: For `-=` (in-place subtraction).

### 4. **Unary Operators**
   - **`__neg__(self)`**: For `-` (unary negation).
   - **`__pos__(self)`**: For `+` (unary positive).

### 5. **Type Conversion**
   - **`__str__(self)`**: For `str()` (string representation).
   - **`__repr__(self)`**: For `repr()` (official string representation).

### 6. **Custom Behavior**
   - **`__getitem__(self, key)`**: For indexing like `[]`.
   - **`__len__(self)`**: For `len()` (length).

These methods help customize how objects of your class behave with common operators and functions.